{"ast":null,"code":"import consumer from \"./consumer\";\nvar chatRoomChannel = consumer.subscriptions.create(\"ChatRoomChannel\", {\n  connected: function connected() {\n    console.log(\"connected to the chat room\"); // Called when the subscription is ready for use on the server\n  },\n  disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n  },\n  received: function received(data) {\n    $('#messages').append('<p class=\"received\"> ' + data.message + '</p>'); // Called when there's incoming data on the websocket for this channel\n  },\n  speak: function speak(message) {\n    this.perform('speak', {\n      message: message\n    });\n  }\n});\nexport default chatRoomChannel;","map":{"version":3,"sources":["D:/Coding/Rails/newchatapp/app/javascript/channels/chat_room_channel.js"],"names":["consumer","chatRoomChannel","subscriptions","create","connected","console","log","disconnected","received","data","$","append","message","speak","perform"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAMC,eAAe,GAAED,QAAQ,CAACE,aAAT,CAAuBC,MAAvB,CAA8B,iBAA9B,EAAiD;AACtEC,EAAAA,SADsE,uBAC1D;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EADU,CAEV;AACD,GAJqE;AAMtEC,EAAAA,YANsE,0BAMvD,CACb;AACD,GARqE;AAUtEC,EAAAA,QAVsE,oBAU7DC,IAV6D,EAUvD;AACbC,IAAAA,CAAC,CAAC,WAAD,CAAD,CAAeC,MAAf,CAAsB,0BAA0BF,IAAI,CAACG,OAA/B,GAAyC,MAA/D,EADa,CAEb;AACD,GAbqE;AAetEC,EAAAA,KAfsE,iBAehED,OAfgE,EAexD;AACZ,SAAKE,OAAL,CAAa,OAAb,EAAqB;AAACF,MAAAA,OAAO,EAAEA;AAAV,KAArB;AACD;AAjBqE,CAAjD,CAAvB;AAoBA,eAAeX,eAAf","sourcesContent":["import consumer from \"./consumer\"\n\nconst chatRoomChannel =consumer.subscriptions.create(\"ChatRoomChannel\", {\n  connected() {\n    console.log(\"connected to the chat room\")\n    // Called when the subscription is ready for use on the server\n  },\n\n  disconnected() {\n    // Called when the subscription has been terminated by the server\n  },\n\n  received(data) {\n    $('#messages').append('<p class=\"received\"> ' + data.message + '</p>')\n    // Called when there's incoming data on the websocket for this channel\n  },\n\n  speak(message){\n    this.perform('speak',{message: message})\n  }\n});\n\nexport default chatRoomChannel;"]},"metadata":{},"sourceType":"module"}